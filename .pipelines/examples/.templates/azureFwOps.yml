parameters:
  - name: mode
    type: string
    default: WriteToCsv
    values:
    - WriteToCsv
    - WriteToArm

  - name: merge
    type: boolean
    default: false
  
  - name: armFolder
    displayName: FirewallArmDirectory
    type: string

  - name: policyFolder
    displayName: FirewallPolicyDirectory
    type: string

  - name: version
    displayName: AzureFwOpsVersion
    type: string
    default: latest

steps:

  #
  # Checkout
  # Checks-out the repository
  #

  - checkout: self
    fetchDepth: 0
    persistCredentials: true

  #
  # Get Latest AzureFwOps version
  # Query PowerShell Gallery for the latest AzureFwOps version
  # to be used as cache key if no version is specified
  #

  - task: PowerShell@2
    displayName: "Get Latest AzureFwOps version"
    condition: eq(variables['version'], 'latest')
    inputs:
      targetType: "inline"
      script: |
        $latestVersionUri = "https://www.powershellgallery.com/api/v2/FindPackagesById()?id='AzureFwOps'&`$filter=IsLatestVersion"
        $latestVersionId = (Invoke-RestMethod $latestVersionUri).properties.NormalizedVersion
        Write-Host "##vso[task.setvariable variable=version;]$latestVersionId"

  #
  # Cache Dependencies
  # Cache dependencies if version has not changed
  #

  - task: Cache@2
    displayName: Cache AzureFwOps module
    condition: ne(variables['version'], '')
    # This task will restore modules from cache if key is found.
    inputs:
      key:  '"AzureFwOpsModule" | "$(version)"'
      path: $(modulesFolder)
      cacheHitVar: AzureFwOpsModule_IsCached

  #
  # Dependencies
  # Install required runtime modules
  #

  - task: PowerShell@2
    displayName: "Dependencies"
    condition: or(eq(variables['version'], ''), ne(variables['AzureFwOpsModule_IsCached'], 'true'))
    inputs:
      targetType: "inline"
      script: |
        if(-not (Test-Path -Path '$(modulesFolder)')) {
          mkdir '$(modulesFolder)'
        }
        $params = @{
          Name            = 'AzureFwOps'
          Path            = '$(modulesFolder)'
          Force           = $true
        }
        if('$(version)') {
          $params.RequiredVersion = '$(version)'
        }
        Save-Module @params

  - task: PowerShell@2
      displayName: parameters.mode
      targetType: "inline"
      script: |
        $Env:PSModulePath = $Env:PSModulePath, '$(modulesFolder)' -join [IO.Path]::PathSeparator
        $Merge = -not ('${{parameters.merge}}' -eq 'true')
        
        If('${{parameters.parameters.mode}}' -eq 'WriteToCsv'){
          ConvertFrom-ArmFw -ArmFolder '${{parameters.armFolder}}' -PolicyFolder '${{parameters.policyFolder}}' -merge:$Merge
        }
        Else{
          ConvertTo-ArmFw -ArmFolder '${{parameters.armFolder}}' -PolicyFolder '${{parameters.policyFolder}}'
        }